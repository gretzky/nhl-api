{"code":"import players from './players';\r\nconst getPlayerById = (id) => players.filter((player) => player.id === id)[0];\r\n// search for a player's id based on a given string\r\n// adding `toUpperCase` makes the search case insensitive\r\nconst getPlayerId = (name) => {\r\n    const p = players.filter((player) => player.name.toUpperCase().includes(name.toUpperCase()));\r\n    if (p.length > 1) {\r\n        // if the query matches more than 1 player, return the array of players\r\n        return p;\r\n    }\r\n    // player found, return the id\r\n    return p[0].id;\r\n};\r\n// get a players headshot\r\n// note: this only retrieves currently active players\r\nconst getPlayerMugshot = (options) => {\r\n    if (!options.id && !options.name) {\r\n        throw new Error('Must provide a player name or id.');\r\n    }\r\n    if (options.season && options.season.toString().length !== 8) {\r\n        throw new Error(\"Season must be formatted as both years, i.e. '20192020'.\");\r\n    }\r\n    if (options.team.length !== 3) {\r\n        throw new Error('Use team abbreviation.');\r\n    }\r\n    const nameOrId = () => {\r\n        if (options.id) {\r\n            return options.id;\r\n        }\r\n        if (options.name) {\r\n            return getPlayerId(options.name);\r\n        }\r\n        return;\r\n    };\r\n    return `https://assets.nhle.com/mugs/nhl/${options.season ? options.season : '20192020'}/${options.team.toUpperCase()}/${nameOrId()}.png`;\r\n};\r\nexport { getPlayerById, getPlayerId, getPlayerMugshot };\r\nexport default players;\r\n//# sourceMappingURL=index.js.map","references":["/Users/sarapope/dev/nhl-api2/packages/players/src/players.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/index.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,OAAO,MAAM,WAAW,CAAC;AAOhC,MAAM,aAAa,GAAG,CAAC,EAAmB,EAAU,EAAE,CACpD,OAAO,CAAC,MAAM,CAAC,CAAC,MAAc,EAAE,EAAE,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AAE1D,mDAAmD;AACnD,yDAAyD;AACzD,MAAM,WAAW,GAAG,CAAC,IAAY,EAAqB,EAAE;IACtD,MAAM,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAc,EAAE,EAAE,CAC1C,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CACvD,CAAC;IACF,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;QAChB,uEAAuE;QACvE,OAAO,CAAC,CAAC;KACV;IACD,8BAA8B;IAC9B,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;AACjB,CAAC,CAAC;AAkBF,yBAAyB;AACzB,qDAAqD;AACrD,MAAM,gBAAgB,GAAG,CACvB,OAA+C,EACvC,EAAE;IACV,IAAI,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;QAChC,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;KACtD;IACD,IAAI,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;QAC5D,MAAM,IAAI,KAAK,CAAC,0DAA0D,CAAC,CAAC;KAC7E;IACD,IAAI,OAAO,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;QAC7B,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;KAC3C;IACD,MAAM,QAAQ,GAAG,GAAG,EAAE;QACpB,IAAI,OAAO,CAAC,EAAE,EAAE;YACd,OAAO,OAAO,CAAC,EAAE,CAAC;SACnB;QACD,IAAI,OAAO,CAAC,IAAI,EAAE;YAChB,OAAO,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SAClC;QACD,OAAO;IACT,CAAC,CAAC;IACF,OAAO,oCACL,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,UACpC,IAAI,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,QAAQ,EAAE,MAAM,CAAC;AACrD,CAAC,CAAC;AAEF,OAAO,EAAE,aAAa,EAAE,WAAW,EAAE,gBAAgB,EAAE,CAAC;AACxD,eAAe,OAAO,CAAC\"}","dts":{"name":"/Users/sarapope/dev/nhl-api2/packages/players/src/index.d.ts","writeByteOrderMark":false,"text":"import players from './players';\r\ninterface Player {\r\n    id: number;\r\n    name: string;\r\n}\r\ndeclare const getPlayerById: (id: string | number) => Player;\r\ndeclare const getPlayerId: (name: string) => number | Player[];\r\ndeclare type RequireOnlyOne<T, Keys extends keyof T = keyof T> = Pick<T, Exclude<keyof T, Keys>> & {\r\n    [K in Keys]-?: Required<Pick<T, K>> & Partial<Record<Exclude<Keys, K>, undefined>>;\r\n}[Keys];\r\ninterface Options {\r\n    id?: number | string;\r\n    name?: string;\r\n    team: string;\r\n    season?: number | string;\r\n}\r\ndeclare const getPlayerMugshot: (options: RequireOnlyOne<Options, \"id\" | \"name\">) => string;\r\nexport { getPlayerById, getPlayerId, getPlayerMugshot };\r\nexport default players;\r\n"}}
