{"code":"import { getPlayerId } from '@nhl-api/players';\r\nimport { get, throwError } from '../util';\r\nexport default async function getPlayer(options) {\r\n    if (!options.id && !options.name) {\r\n        throwError('getPlayer', 'Must include a player name or ID as a param.');\r\n    }\r\n    if (options.season && options.season.toString().length !== 8) {\r\n        throwError('getPlayer', `Season must be formatted as both full years, i.e. '20192020'.`);\r\n    }\r\n    const baseUrl = () => {\r\n        if (options.name) {\r\n            const id = getPlayerId(options.name);\r\n            if (Array.isArray(id)) {\r\n                console.log(id);\r\n                throwError('getPlayer', 'More than 1 player found. Check the console for a list of matching players and their ids.');\r\n            }\r\n            return `/people/${id}`;\r\n        }\r\n        return `/people/${options.id}`;\r\n    };\r\n    const url = options.stats ? `${baseUrl()}/stats` : baseUrl();\r\n    const handleData = (data) => {\r\n        if (data.stats) {\r\n            if (data.stats.length > 1) {\r\n                return data.stats;\r\n            }\r\n            else if (data.stats[0].splits.length > 1) {\r\n                return data.stats[0].splits;\r\n            }\r\n            return data.stats[0].splits[0];\r\n        }\r\n        return data.people[0];\r\n    };\r\n    try {\r\n        const response = await get(url, options).then((data) => handleData(data));\r\n        return Promise.resolve(response);\r\n    }\r\n    catch (err) {\r\n        return throwError('getPlayer', err);\r\n    }\r\n}\r\n//# sourceMappingURL=index.js.map","references":["/Users/sara/dev/nhlapi2/packages/players/dist/index.d.ts","/Users/sara/dev/nhlapi2/packages/client/src/util/index.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/player/index.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAC;AAC/C,OAAO,EAAE,GAAG,EAAE,UAAU,EAAqB,MAAM,SAAS,CAAC;AAY7D,MAAM,CAAC,OAAO,CAAC,KAAK,UAAU,SAAS,CAAC,OAAsB;IAC5D,IAAI,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;QAChC,UAAU,CAAC,WAAW,EAAE,8CAA8C,CAAC,CAAC;KACzE;IAED,IAAI,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;QAC5D,UAAU,CACR,WAAW,EACX,+DAA+D,CAChE,CAAC;KACH;IAED,MAAM,OAAO,GAAG,GAAW,EAAE;QAC3B,IAAI,OAAO,CAAC,IAAI,EAAE;YAChB,MAAM,EAAE,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACrC,IAAI,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE;gBACrB,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;gBAChB,UAAU,CACR,WAAW,EACX,2FAA2F,CAC5F,CAAC;aACH;YACD,OAAO,WAAW,EAAE,EAAE,CAAC;SACxB;QACD,OAAO,WAAW,OAAO,CAAC,EAAE,EAAE,CAAC;IACjC,CAAC,CAAC;IAEF,MAAM,GAAG,GAAW,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;IAErE,MAAM,UAAU,GAAG,CAAC,IAAS,EAAE,EAAE;QAC/B,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;gBACzB,OAAO,IAAI,CAAC,KAAK,CAAC;aACnB;iBAAM,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC1C,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;aAC7B;YACD,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;SAChC;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACxB,CAAC,CAAC;IAEF,IAAI;QACF,MAAM,QAAQ,GAAG,MAAM,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,IAAS,EAAE,EAAE,CAC1D,UAAU,CAAC,IAAI,CAAC,CACjB,CAAC;QACF,OAAO,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;KAClC;IAAC,OAAO,GAAG,EAAE;QACZ,OAAO,UAAU,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;KACrC;AACH,CAAC\"}","dts":{"name":"/Users/sara/dev/nhlapi2/packages/client/src/player/index.d.ts","writeByteOrderMark":false,"text":"import { RequireAtLeastOne } from '../util';\r\ndeclare type Options = {\r\n    id?: number | string;\r\n    name?: string;\r\n};\r\ndeclare type PlayerOptions = RequireAtLeastOne<Options, 'id' | 'name'> & {\r\n    season?: string | number;\r\n    stats?: string;\r\n};\r\nexport default function getPlayer(options: PlayerOptions): Promise<void>;\r\nexport {};\r\n"}}
