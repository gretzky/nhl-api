"use strict";function e(e){return e&&"object"==typeof e&&"default"in e?e.default:e}var t=e(require("axios")),r=require("@nhl-api/players"),n=e(require("@nhl-api/teams"));function s(e,t){try{var r=e()}catch(e){return t(e)}return r&&r.then?r.then(void 0,t):r}function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}"undefined"!=typeof Symbol&&(Symbol.iterator||(Symbol.iterator=Symbol("Symbol.iterator"))),"undefined"!=typeof Symbol&&(Symbol.asyncIterator||(Symbol.asyncIterator=Symbol("Symbol.asyncIterator")));var i=function(e,t){return Promise.resolve(s((function(){return Promise.resolve(u.get(e,t?{params:o({},t)}:void 0).then((function(e){return e.data}))).then(Promise.resolve)}),(function(e){return e})))},u=t.create({baseURL:"https://statsapi.web.nhl.com/api/v1"}),a=function(e,t,r){throw new Error("[NHL API]: "+e+"(): "+(t||r))},c=function(e,t){return t&&t.id?"/"+e+"/"+t.id:"/"+e};exports.default={getAwards:function(e){try{var t=c("awards",e);return Promise.resolve(s((function(){return Promise.resolve(i(t,e).then((function(e){return e.awards.length>1?e.awards:e.awards[0]}))).then((function(e){return Promise.resolve(e)}))}),(function(e){return a("getAwards",e)})))}catch(e){return Promise.reject(e)}},getConferences:function(e){try{var t=c("conferences",e);return Promise.resolve(s((function(){return Promise.resolve(i(t,e).then((function(e){return e.conferences.length>1?e.conferences:e.conferences[0]}))).then((function(e){return Promise.resolve(e)}))}),(function(e){return a("getConferences",e)})))}catch(e){return Promise.reject(e)}},getDivisions:function(e){try{var t=c("divisions",e);return Promise.resolve(s((function(){return Promise.resolve(i(t,e).then((function(e){return e.divisions.length>1?e.divisions:e.divisions[0]}))).then((function(e){return Promise.resolve(e)}))}),(function(e){return a("getDivisions",e)})))}catch(e){return Promise.reject(e)}},getDraft:function(e){try{var t=c("draft",e);return e&&e.year&&4!==e.year.toString().length&&a("getDraft","Year must be a full, 4 digit number."),Promise.resolve(s((function(){return Promise.resolve(i(e&&e.year?t+"/"+e.year:t,e).then((function(e){return e.drafts[0]}))).then((function(e){return Promise.resolve(e)}))}),(function(e){return a("getDraft",e)})))}catch(e){return Promise.reject(e)}},getGame:function(e){try{var t=c("game",e),r=e.type.includes("feed")||e.type.includes("live");return e&&e.id||a("getGame","Must include a game ID."),Promise.resolve(s((function(){return Promise.resolve(i(r?t+"/feed/live":t+"/"+e.type,e).then((function(e){return r?{gamePk:e.gamePk,link:e.link,liveData:e.liveData,gameData:e.gameData}:e}))).then((function(e){return Promise.resolve(e)}))}),(function(e){return a("getGame",e)})))}catch(e){return Promise.reject(e)}},getGameTypes:function(e){try{var t=c("gameTypes",e);return Promise.resolve(s((function(){return Promise.resolve(i(t,e).then((function(e){return e}))).then((function(e){return Promise.resolve(e)}))}),(function(e){return a("getGameTypes",e)})))}catch(e){return Promise.reject(e)}},getPlayer:function(e){try{e.id||e.name||a("getPlayer","Must include a player name or ID as a param."),e.season&&8!==e.season.toString().length&&a("getPlayer","Season must be formatted as both full years, i.e. '20192020'.");var t=function(){if(e.name){var t=r.getPlayerId(e.name);return Array.isArray(t)&&(console.log(t),a("getPlayer","More than 1 player found. Check the console for a list of matching players and their ids.")),"/people/"+t}return"/people/"+e.id},n=e.stats?t()+"/stats":t();return Promise.resolve(s((function(){return Promise.resolve(i(n,e).then((function(e){return function(e){return e.stats?e.stats.length>1?e.stats:e.stats[0].splits.length>1?e.stats[0].splits:e.stats[0].splits[0]:e.people[0]}(e)}))).then((function(e){return Promise.resolve(e)}))}),(function(e){return a("getPlayer",e)})))}catch(e){return Promise.reject(e)}},getPlayTypes:function(e){try{var t=c("playTypes",e);return Promise.resolve(s((function(){return Promise.resolve(i(t,e).then((function(e){return e}))).then((function(e){return Promise.resolve(e)}))}),(function(e){return a("getPlayTypes",e)})))}catch(e){return Promise.reject(e)}},getProspects:function(e){try{var t=c("draft/prospects",e);return Promise.resolve(s((function(){return Promise.resolve(i(t,e).then((function(e){return e.prospects.length>1?e.prospects:e.prospects[0]}))).then((function(e){return Promise.resolve(e)}))}),(function(e){return a("getProspects",e)})))}catch(e){return Promise.reject(e)}},getSchedule:function(e){try{var t,r=c("schedule",e);return e&&e.expand&&(e.expand="schedule."+e.expand),e&&e.team&&("string"==typeof e.team&&e.team.length>2&&(e.team=n.filter((function(t){return t.name===e.team}))[0].id),delete Object.assign(e,(t={},t.teamId=e.team,t)).team),Promise.resolve(s((function(){return Promise.resolve(i(r,e).then((function(e){return e.dates.length>1?e.dates:e.dates[0]}))).then((function(e){return Promise.resolve(e)}))}),(function(e){return a("getSchedule",e)})))}catch(e){return Promise.reject(e)}},getSeasons:function(e){try{return Promise.resolve(s((function(){return Promise.resolve(i(e&&e.season?"/seasons/"+e.season:"/seasons",e).then((function(e){return e.seasons.length>1?e.seasons:e.seasons[0]}))).then((function(e){return Promise.resolve(e)}))}),(function(e){return a("getSeasons",e)})))}catch(e){return Promise.reject(e)}},getStandings:function(e){try{return e&&e.expand&&(e.expand="standings."+e.expand),Promise.resolve(s((function(){return Promise.resolve(i("/standings",e).then((function(e){return e.records}))).then((function(e){return Promise.resolve(e)}))}),(function(e){return a("getStandings",e)})))}catch(e){return Promise.reject(e)}},getStandingsTypes:function(e){try{var t=c("standingsTypes",e);return Promise.resolve(s((function(){return Promise.resolve(i(t,e).then((function(e){return e}))).then((function(e){return Promise.resolve(e)}))}),(function(e){return a("getStandingsTypes",e)})))}catch(e){return Promise.reject(e)}},getTeams:function(e){try{e&&e.season&&8!==e.season.toString().length&&a("getTeams","Season must be formatted as both full years, i.e. '20192020'.");var t=e&&e.name?n.filter((function(t){return t.name===e.name}))[0].id:e&&e.id,r=e&&e.id||e&&e.name?"/teams/"+t:"/teams",o=e&&e.expand&&e.expand.includes("roster")?r+"/roster":e&&e.expand&&e.expand.includes("stats")?r+"/stats":r;e&&e.expand&&(e.expand="team."+e.expand);var u=n.filter((function(e){return e.isActive}));return Promise.resolve(s((function(){return Promise.resolve(i(o,e).then((function(e){return e.roster?e.roster:e.stats?e.stats.length>1?e.stats:e.stats[0]:e.teams.length>1&&e.teams.some((function(e){return e.abbreviation}))?e.teams.map((function(e,t){return Object.assign({},e,u[t])})):e.teams[0].hasOwnProperty("abbreviation")?Object.assign({},e.teams[0],u.find((function(t){return t.id===e.teams[0].id}))):e}))).then((function(e){return Promise.resolve(e)}))}),(function(e){return a("getTeams",e)})))}catch(e){return Promise.reject(e)}},getVenues:function(e){try{var t=c("venues",e);return Promise.resolve(s((function(){return Promise.resolve(i(t,e).then((function(e){return e.venues.length>1?e.venues:e.venues[0]}))).then((function(e){return Promise.resolve(e)}))}),(function(e){return a("getVenues",e)})))}catch(e){return Promise.reject(e)}}};
//# sourceMappingURL=client.cjs.production.min.js.map
