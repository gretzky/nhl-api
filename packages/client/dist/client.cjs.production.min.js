'use strict';
function e(e) {
  return e && 'object' == typeof e && 'default' in e ? e.default : e;
}
var r = e(require('axios')),
  t = require('@nhl-api/players'),
  n = e(require('@nhl-api/teams'));
function o(e, r) {
  try {
    var t = e();
  } catch (e) {
    return r(e);
  }
  return t && t.then ? t.then(void 0, r) : t;
}
function s() {
  return (s =
    Object.assign ||
    function(e) {
      for (var r = 1; r < arguments.length; r++) {
        var t = arguments[r];
        for (var n in t)
          Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);
      }
      return e;
    }).apply(this, arguments);
}
'undefined' != typeof Symbol &&
  (Symbol.iterator || (Symbol.iterator = Symbol('Symbol.iterator'))),
  'undefined' != typeof Symbol &&
    (Symbol.asyncIterator ||
      (Symbol.asyncIterator = Symbol('Symbol.asyncIterator')));
var i = function(e, r) {
    return Promise.resolve(
      o(
        function() {
          return Promise.resolve(
            u.get(e, r ? { params: s({}, r) } : void 0).then(function(e) {
              return e.data;
            })
          ).then(Promise.resolve);
        },
        function(e) {
          return e;
        }
      )
    );
  },
  u = r.create({ baseURL: 'https://statsapi.web.nhl.com/api/v1' }),
  a = function(e, r, t) {
    throw new Error('[NHL API]: ' + e + '(): ' + (r || t));
  },
  c = function(e, r) {
    return r && r.id ? '/' + e + '/' + r.id : '/' + e;
  };
exports.default = {
  getAwards: function(e) {
    try {
      var r = c('awards', e);
      return Promise.resolve(
        o(
          function() {
            return Promise.resolve(
              i(r, e).then(function(e) {
                return e.awards.length > 1 ? e.awards : e.awards[0];
              })
            ).then(function(e) {
              return Promise.resolve(e);
            });
          },
          function(e) {
            return a('getAwards', e);
          }
        )
      );
    } catch (e) {
      return Promise.reject(e);
    }
  },
  getConferences: function(e) {
    try {
      var r = c('conferences', e);
      return Promise.resolve(
        o(
          function() {
            return Promise.resolve(
              i(r, e).then(function(e) {
                return e.conferences.length > 1
                  ? e.conferences
                  : e.conferences[0];
              })
            ).then(function(e) {
              return Promise.resolve(e);
            });
          },
          function(e) {
            return a('getConferences', e);
          }
        )
      );
    } catch (e) {
      return Promise.reject(e);
    }
  },
  getDivisions: function(e) {
    try {
      var r = c('divisions', e);
      return Promise.resolve(
        o(
          function() {
            return Promise.resolve(
              i(r, e).then(function(e) {
                return e.divisions.length > 1 ? e.divisions : e.divisions[0];
              })
            ).then(function(e) {
              return Promise.resolve(e);
            });
          },
          function(e) {
            return a('getDivisions', e);
          }
        )
      );
    } catch (e) {
      return Promise.reject(e);
    }
  },
  getDraft: function(e) {
    try {
      var r = c('draft', e);
      return (
        e &&
          e.year &&
          4 !== e.year.toString().length &&
          a('getDraft', 'Year must be a full, 4 digit number.'),
        Promise.resolve(
          o(
            function() {
              return Promise.resolve(
                i(e && e.year ? r + '/' + e.year : r, e).then(function(e) {
                  return e.drafts[0];
                })
              ).then(function(e) {
                return Promise.resolve(e);
              });
            },
            function(e) {
              return a('getDraft', e);
            }
          )
        )
      );
    } catch (e) {
      return Promise.reject(e);
    }
  },
  getGame: function(e) {
    try {
      var r = c('game', e),
        t = e.type.includes('feed') || e.type.includes('live');
      return (
        (e && e.id) || a('getGame', 'Must include a game ID.'),
        Promise.resolve(
          o(
            function() {
              return Promise.resolve(
                i(t ? r + '/feed/live' : r + '/' + e.type, e).then(function(e) {
                  return t
                    ? {
                        gamePk: e.gamePk,
                        link: e.link,
                        liveData: e.liveData,
                        gameData: e.gameData,
                      }
                    : e;
                })
              ).then(function(e) {
                return Promise.resolve(e);
              });
            },
            function(e) {
              return a('getGame', e);
            }
          )
        )
      );
    } catch (e) {
      return Promise.reject(e);
    }
  },
  getGameTypes: function(e) {
    try {
      var r = c('gameTypes', e);
      return Promise.resolve(
        o(
          function() {
            return Promise.resolve(
              i(r, e).then(function(e) {
                return e;
              })
            ).then(function(e) {
              return Promise.resolve(e);
            });
          },
          function(e) {
            return a('getGameTypes', e);
          }
        )
      );
    } catch (e) {
      return Promise.reject(e);
    }
  },
  getPlayer: function(e) {
    try {
      e.id ||
        e.name ||
        a('getPlayer', 'Must include a player name or ID as a param.'),
        e.season &&
          8 !== e.season.toString().length &&
          a(
            'getPlayer',
            "Season must be formatted as both full years, i.e. '20192020'."
          );
      var r = function() {
          if (e.name) {
            var r = t.getPlayerId(e.name);
            return (
              Array.isArray(r) &&
                (console.log(r),
                a(
                  'getPlayer',
                  'More than 1 player found. Check the console for a list of matching players and their ids.'
                )),
              '/people/' + r
            );
          }
          return '/people/' + e.id;
        },
        n = e.stats ? r() + '/stats' : r();
      return Promise.resolve(
        o(
          function() {
            return Promise.resolve(
              i(n, e).then(function(r) {
                return (function(r) {
                  return e.stats
                    ? r.stats.length > 1
                      ? r.stats
                      : r.stats[0].splits.length > 1
                      ? r.stats[0].splits
                      : r.stats[0].splits[0]
                    : r.people[0];
                })(r);
              })
            ).then(function(e) {
              return Promise.resolve(e);
            });
          },
          function(e) {
            return a('getPlayer', e);
          }
        )
      );
    } catch (e) {
      return Promise.reject(e);
    }
  },
  getPlayTypes: function(e) {
    try {
      var r = c('playTypes', e);
      return Promise.resolve(
        o(
          function() {
            return Promise.resolve(
              i(r, e).then(function(e) {
                return e;
              })
            ).then(function(e) {
              return Promise.resolve(e);
            });
          },
          function(e) {
            return a('getPlayTypes', e);
          }
        )
      );
    } catch (e) {
      return Promise.reject(e);
    }
  },
  getProspects: function(e) {
    try {
      var r = c('draft/prospects', e);
      return Promise.resolve(
        o(
          function() {
            return Promise.resolve(
              i(r, e).then(function(e) {
                return e.prospects;
              })
            ).then(function(e) {
              return Promise.resolve(e);
            });
          },
          function(e) {
            return a('getProspects', e);
          }
        )
      );
    } catch (e) {
      return Promise.reject(e);
    }
  },
  getSchedule: function(e) {
    try {
      var r,
        t = c('schedule', e);
      return (
        e && e.expand && (e.expand = 'schedule.' + e.expand),
        e &&
          e.team &&
          ('string' == typeof e.team &&
            e.team.length > 2 &&
            (e.team = n.filter(function(r) {
              return r.name === e.team;
            })[0].id),
          delete Object.assign(e, ((r = {}), (r.teamId = e.team), r)).team),
        Promise.resolve(
          o(
            function() {
              return Promise.resolve(
                i(t, e).then(function(e) {
                  return delete e.wait, e;
                })
              ).then(function(e) {
                return Promise.resolve(e);
              });
            },
            function(e) {
              return a('getSchedule', e);
            }
          )
        )
      );
    } catch (e) {
      return Promise.reject(e);
    }
  },
  getSeasons: function(e) {
    try {
      return Promise.resolve(
        o(
          function() {
            return Promise.resolve(
              i(e && e.season ? '/seasons/' + e.season : '/seasons', e).then(
                function(e) {
                  return e.seasons.length > 1 ? e.seasons : e.seasons[0];
                }
              )
            ).then(function(e) {
              return Promise.resolve(e);
            });
          },
          function(e) {
            return a('getSeasons', e);
          }
        )
      );
    } catch (e) {
      return Promise.reject(e);
    }
  },
  getStandings: function(e) {
    try {
      return (
        e && e.expand && (e.expand = 'standings.' + e.expand),
        Promise.resolve(
          o(
            function() {
              return Promise.resolve(
                i('/standings', e).then(function(e) {
                  return e.records;
                })
              ).then(function(e) {
                return Promise.resolve(e);
              });
            },
            function(e) {
              return a('getStandings', e);
            }
          )
        )
      );
    } catch (e) {
      return Promise.reject(e);
    }
  },
  getStandingsTypes: function(e) {
    try {
      var r = c('standingsTypes', e);
      return Promise.resolve(
        o(
          function() {
            return Promise.resolve(
              i(r, e).then(function(e) {
                return e;
              })
            ).then(function(e) {
              return Promise.resolve(e);
            });
          },
          function(e) {
            return a('getStandingsTypes', e);
          }
        )
      );
    } catch (e) {
      return Promise.reject(e);
    }
  },
  getTeams: function(e) {
    try {
      e.season &&
        8 !== e.season.toString().length &&
        a(
          'getTeams',
          "Season must be formatted as both full years, i.e. '20192020'."
        );
      var r = e.name
          ? n.filter(function(r) {
              return r.name === e.name;
            })[0].id
          : e.id,
        t = e.id || e.name ? '/teams/' + r : '/teams',
        s =
          e.expand && e.expand.includes('roster')
            ? t + '/roster'
            : e.expand && e.expand.includes('stats')
            ? t + '/stats'
            : t;
      e.expand && (e.expand = 'team.' + e.expand);
      var u = n.filter(function(e) {
        return e.isActive;
      });
      return Promise.resolve(
        o(
          function() {
            return Promise.resolve(
              i(s, e).then(function(e) {
                return e.roster
                  ? e.roster
                  : e.stats
                  ? e.stats
                  : Array.isArray(e) &&
                    e.some(function(e) {
                      return e.abbreviation;
                    })
                  ? e.map(function(e, r) {
                      return Object.assign({}, e, u[r]);
                    })
                  : e.hasOwnProperty('abbreviation')
                  ? Object.assign(
                      {},
                      e,
                      u.find(function(r) {
                        return r.id === e.id;
                      })
                    )
                  : e;
              })
            ).then(function(e) {
              return Promise.resolve(e);
            });
          },
          function(e) {
            return a('getTeams', e);
          }
        )
      );
    } catch (e) {
      return Promise.reject(e);
    }
  },
  getVenues: function(e) {
    try {
      var r = c('venues', e);
      return Promise.resolve(
        o(
          function() {
            return Promise.resolve(
              i(r, e).then(function(e) {
                return e.venues.length > 1 ? e.venues : e.venues[0];
              })
            ).then(function(e) {
              return Promise.resolve(e);
            });
          },
          function(e) {
            return a('getVenues', e);
          }
        )
      );
    } catch (e) {
      return Promise.reject(e);
    }
  },
};
//# sourceMappingURL=client.cjs.production.min.js.map
