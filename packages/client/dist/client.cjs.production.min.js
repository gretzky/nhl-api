"use strict";function e(e){return e&&"object"==typeof e&&"default"in e?e.default:e}var r=e(require("axios")),t=require("@nhl-api/players"),n=e(require("@nhl-api/teams"));function o(e,r){try{var t=e()}catch(e){return r(e)}return t&&t.then?t.then(void 0,r):t}function s(){return(s=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e}).apply(this,arguments)}"undefined"!=typeof Symbol&&(Symbol.iterator||(Symbol.iterator=Symbol("Symbol.iterator"))),"undefined"!=typeof Symbol&&(Symbol.asyncIterator||(Symbol.asyncIterator=Symbol("Symbol.asyncIterator")));var i=function(e,r,t){return Promise.resolve(o((function(){return Promise.resolve(u.get(e,t?{params:s({},t)}:void 0).then((function(e){return e.data})).then((function(e){return e.hasOwnProperty(r)?f(e[r]):e}))).then(Promise.resolve)}),(function(e){return e})))},u=r.create({baseURL:"https://statsapi.web.nhl.com/api/v1"}),a=function(e,r,t){throw new Error("[NHL API]: "+e+"(): "+(r||t))},c=function(e,r){return r&&r.id?"/"+e+"/"+r.id:"/"+e},f=function(e){return Array.isArray(e)&&1===e.length?e[0]:e};exports.default={getAwards:function(e){try{var r=c("awards",e);return Promise.resolve(o((function(){return Promise.resolve(i(r,"awards",e).then((function(e){return e}))).then((function(e){return Promise.resolve(e)}))}),(function(e){return a("getAwards",e)})))}catch(e){return Promise.reject(e)}},getConferences:function(e){try{var r=c("conferences",e);return Promise.resolve(o((function(){return Promise.resolve(i(r,"conferences",e).then((function(e){return e}))).then((function(e){return Promise.resolve(e)}))}),(function(e){return a("getConferences",e)})))}catch(e){return Promise.reject(e)}},getDivisions:function(e){try{var r=c("divisions",e);return Promise.resolve(o((function(){return Promise.resolve(i(r,"divisions",e).then((function(e){return e}))).then((function(e){return Promise.resolve(e)}))}),(function(e){return a("getDivisions",e)})))}catch(e){return Promise.reject(e)}},getDraft:function(e){try{var r=c("draft",e);return e&&e.year&&4!==e.year.toString().length&&a("getDraft","Year must be a full, 4 digit number."),Promise.resolve(o((function(){return Promise.resolve(i(e&&e.year?r+"/"+e.year:r,"drafts",e).then((function(e){return e}))).then((function(e){return Promise.resolve(e)}))}),(function(e){return a("getDraft",e)})))}catch(e){return Promise.reject(e)}},getGame:function(e){try{var r=c("game",e),t=e.type.includes("feed")||e.type.includes("live");return e&&e.id||a("getGame","Must include a game ID."),Promise.resolve(o((function(){return Promise.resolve(i(t?r+"/feed/live":r+"/"+e.type,void 0,e).then((function(e){return t?{gamePk:e.gamePk,link:e.link,liveData:e.liveData,gameData:e.gameData}:e}))).then((function(e){return Promise.resolve(e)}))}),(function(e){return a("getGame",e)})))}catch(e){return Promise.reject(e)}},getGameTypes:function(e){try{var r=c("gameTypes",e);return Promise.resolve(o((function(){return Promise.resolve(i(r,"gameTypes",e).then((function(e){return e}))).then((function(e){return Promise.resolve(e)}))}),(function(e){return a("getGameTypes",e)})))}catch(e){return Promise.reject(e)}},getPlayer:function(e){try{e.id||e.name||a("getPlayer","Must include a player name or ID as a param."),e.season&&8!==e.season.toString().length&&a("getPlayer","Season must be formatted as both full years, i.e. '20192020'.");var r=function(){if(e.name){var r=t.getPlayerId(e.name);return Array.isArray(r)&&(console.log(r),a("getPlayer","More than 1 player found. Check the console for a list of matching players and their ids.")),"/people/"+r}return"/people/"+e.id},n=e.stats?r()+"/stats":r(),s=e.stats?"stats":"people";return Promise.resolve(o((function(){return Promise.resolve(i(n,s,e).then((function(e){return e}))).then((function(e){return Promise.resolve(e)}))}),(function(e){return a("getPlayer",e)})))}catch(e){return Promise.reject(e)}},getPlayTypes:function(e){try{var r=c("playTypes",e);return Promise.resolve(o((function(){return Promise.resolve(i(r,"playTypes",e).then((function(e){return e}))).then((function(e){return Promise.resolve(e)}))}),(function(e){return a("getPlayTypes",e)})))}catch(e){return Promise.reject(e)}},getProspects:function(e){try{var r=c("draft/prospects",e);return Promise.resolve(o((function(){return Promise.resolve(i(r,"prospects",e).then((function(e){return e}))).then((function(e){return Promise.resolve(e)}))}),(function(e){return a("getProspects",e)})))}catch(e){return Promise.reject(e)}},getSchedule:function(e){try{var r,t=c("schedule",e);return e&&e.expand&&(e.expand="schedule."+e.expand),e&&e.team&&("string"==typeof e.team&&e.team.length>2&&(e.team=n.filter((function(r){return r.name===e.team}))[0].id),delete Object.assign(e,(r={},r.teamId=e.team,r)).team),Promise.resolve(o((function(){return Promise.resolve(i(t,"dates",e).then((function(e){return e}))).then((function(e){return Promise.resolve(e)}))}),(function(e){return a("getSchedule",e)})))}catch(e){return Promise.reject(e)}},getSeasons:function(e){try{return Promise.resolve(o((function(){return Promise.resolve(i(e&&e.season?"/seasons/"+e.season:"/seasons","seasons",e).then((function(e){return e}))).then((function(e){return Promise.resolve(e)}))}),(function(e){return a("getSeasons",e)})))}catch(e){return Promise.reject(e)}},getStandings:function(e){try{return e&&e.expand&&(e.expand="standings."+e.expand),Promise.resolve(o((function(){return Promise.resolve(i("/standings","standings",e).then((function(e){return e.records}))).then((function(e){return Promise.resolve(e)}))}),(function(e){return a("getStandings",e)})))}catch(e){return Promise.reject(e)}},getStandingsTypes:function(e){try{var r=c("standingsTypes",e);return Promise.resolve(o((function(){return Promise.resolve(i(r,"standingsTypes",e).then((function(e){return e}))).then((function(e){return Promise.resolve(e)}))}),(function(e){return a("getStandingsTypes",e)})))}catch(e){return Promise.reject(e)}},getTeams:function(e){try{e&&e.season&&8!==e.season.toString().length&&a("getTeams","Season must be formatted as both full years, i.e. '20192020'.");var r=e&&e.name?n.filter((function(r){return r.name===e.name}))[0].id:e&&e.id,t=e&&e.id||e&&e.name?"/teams/"+r:"/teams",i=e&&e.expand&&e.expand.includes("roster")?t+"/roster":e&&e.expand&&e.expand.includes("stats")?t+"/stats":t;e&&e.expand&&(e.expand="team."+e.expand);var c=n.filter((function(e){return e.isActive}));return Promise.resolve(o((function(){return Promise.resolve(u.get(i,e?{params:s({},e)}:null).then((function(e){return e.data})).then((function(e){return e.roster?e.roster:e.stats?e.stats.length>1?e.stats:e.stats[0]:e.teams.length>1&&e.teams.some((function(e){return e.abbreviation}))?e.teams.map((function(e,r){return Object.assign({},e,c[r])})):e.teams[0].hasOwnProperty("abbreviation")?Object.assign({},e.teams[0],c.find((function(r){return r.id===e.teams[0].id}))):e}))).then((function(e){return Promise.resolve(e)}))}),(function(e){return a("getTeams",e)})))}catch(e){return Promise.reject(e)}},getVenues:function(e){try{var r=c("venues",e);return Promise.resolve(o((function(){return Promise.resolve(i(r,"venues",e).then((function(e){return e}))).then((function(e){return Promise.resolve(e)}))}),(function(e){return a("getVenues",e)})))}catch(e){return Promise.reject(e)}}};
//# sourceMappingURL=client.cjs.production.min.js.map
